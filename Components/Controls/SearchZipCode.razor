
@inject IAddressServices AddressServices
@inject NavigationManager NavigationManager


<h3>Buscar Cep</h3>

@if (zipCode is not null)
{
    <EditForm FormName="SearchZipCode" Model="zipCode" OnValidSubmit="BuscarCep">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <InputText placeholder="Entrar Cep" @bind-Value="zipCode.ZipCode" />
        <div class="col">
            <ValidationMessage For="() => zipCode.ZipCode"></ValidationMessage>
        </div>
        <button type="submit" class="btn btn-primary">Buscar Cep</button>

    </EditForm>
    <br />
    <div style="@(isVisible ? "display:block;" : "display:none;")" class="alert alert-warning" role="alert">
        <p>@Message</p>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {

    [Parameter]
    public EventCallback OnSuccess { get; set; }

    [Parameter]
    public EventCallback OnFailure { get; set; }

    private SearchZipCodeModel? zipCode { get; set; } = new();
    private String Message = String.Empty;
    private bool isVisible = false;

    private async Task BuscarCep()
    {
        ArgumentNullException.ThrowIfNull(zipCode);
        if (string.IsNullOrWhiteSpace(zipCode.ZipCode))
        {
            return;
        }
        await AddressServices.SearchZipCodeAsync(zipCode);
        if (AddressServices.CurrentAddress is not null)
        {
            isVisible = false;
            await OnSuccess.InvokeAsync();
        }
        else
        {
            isVisible = true;
            Message = AddressServices.Message;
            await OnFailure.InvokeAsync();
        }
    }
}
