@page "/"
@attribute [StreamRendering]

@inject IUserLoginServices UserLoginServices
@inject NavigationManager NavigationManager
@inject ICacheServices CacheServices
@inject NavService NavService
@inject MessageHandler MessageHandler


<div>
    @if (currentUser is not null && currentUserDetails is not null)
    {
        <div class="container-fluid">
            <div class="row align-items-center">
                <div class="col">
                   @*  <h1>Welcome to EconomizzeHybrid</h1> *@
                </div>
                <div class="col-auto">
                    <div class="d-flex align-items-center">
                        <span class="me-3">@currentUserDetails.UserFirstName</span>
                        <button class="btn btn-outline-light position-relative">
                            <i class="bi bi-bell-fill"></i>
                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                                3
                                @* <span class="visually-hidden">unread messages</span> *@
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
   

    

</div>
@code{
    private UserLoginModel? currentUser;
    private UserModel? currentUserDetails;

    protected override async Task OnInitializedAsync()
    {
        await SearchActiveUser();
        if (UserLoginServices.CurrentUser is null)
        {
            NavigationManager.NavigateTo("login");
        }
        else
        {
            await CreateNavigationItem();
            NavigationManager.NavigateTo("perfil");
        }
    }

    private async Task SearchActiveUser()
    {
        if (UserLoginServices.CurrentUser is null)
        {
            await CacheServices.SearchActiveSession();
            UserLoginServices.CurrentUser = CacheServices.CurrentUser;
        }
    }

    private async Task CreateNavigationItem()
    {
        if (UserLoginServices.CurrentUser is not null)
        {
            await NavService.AddNavItem
            (
                new NavItemModel
                    {
                        Text = "Sair",
                        Url = "Sair",
                        Icon = "bi bi-box-arrow-right",
                        IsVisible = true
                    }
            );
            NavigationManager.NavigateTo("perfil");
        }
    }

    private async Task LogOut()
    {
        await NavService.RemoveNavItem("sair");
        await UserLoginServices.LogOut();
        await CacheServices.LogOut();

    }
}
