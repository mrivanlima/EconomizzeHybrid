@page "/Criar"
@inject IUserLoginServices UserLoginServices
@inject NavigationManager NavigationManager
@inject UserLoginCacheServices UserLoginSqliteServices
@inject MessageHandler MessageHandler


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <h3 class="text-center">Criar Conta</h3>
            <EditForm hidden=@HideRegistration Enhance Model="register" FormName="Register" OnValidSubmit="RegisterUserAsync">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group">
                    @*    <label for="email">Email address</label> *@
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                        </div>
                        <InputText @bind-Value="@register.Username" class="form-control" placeholder="Email"></InputText>

                    </div>
                    <div class="col">
                        <ValidationMessage For="() => register.Username"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group">
                    @*  <label for="password">Password</label> *@
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        </div>
                        <InputText @bind-Value="@register.Password" class="form-control" placeholder="Senha"></InputText>

                        @* <input type="password" class="form-control" id="password" placeholder="Senha"> *@
                    </div>
                    <div class="col">
                        <ValidationMessage For="() => register.Password"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group">
                    @*  <label for="password">Password</label> *@
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        </div>
                        <InputText @bind-Value="@register.ConfirmPassword" class="form-control" placeholder="Senha"></InputText>

                        @* <input type="password" class="form-control" id="password" placeholder="Senha"> *@
                    </div>
                    <div class="col">
                        <ValidationMessage For="() => register.ConfirmPassword"></ValidationMessage>
                    </div>
                </div>
                <InputNumber hidden @bind-Value="@register.UserId"></InputNumber>
                <button type="submit" class="btn btn-primary btn-block">Criar</button>
                <hr>
                <button type="button" class="btn btn-danger btn-block">
                    <i class="fab fa-google"></i> Login with Google
                </button>
            </EditForm>
            <br />

            <div style="@(isVisible ? "display:block;" : "display:none;")" class="alert alert-warning" role="alert">
                <EditForm Model="register" FormName="Verify" OnSubmit="Verify">

                    <InputNumber hidden @bind-Value=@register.UserId></InputNumber>
                    <InputText hidden @bind-Value=@UserUniqueId></InputText>
                    <button type="submit" class="btn btn-danger btn-block">
                        <i class="fab fa-google"></i> @message
                    </button>
                </EditForm>
                    
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm(FormName = "Register")]
    private RegisterModel register { get; set; } = new();

    private String message = String.Empty;
    private bool isVisible = false;
    private string? UserUniqueId { get; set; }
    private bool NewUser { get; set; } = true;
    private bool HideRegistration = false;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(0);
        MessageHandler.Message = string.Empty;
    }

    private async Task RegisterUserAsync()
    {
        ArgumentNullException.ThrowIfNull(register);
        await UserLoginServices.CreateAsync(register);
        isVisible = true;
        if (!string.IsNullOrEmpty(MessageHandler.Message))
        {
            message = MessageHandler.Message;
            NewUser = false;
            return;
        }
        register = UserLoginServices.RegisteredUser;
        UserUniqueId = register.UserUniqueId.ToString();
        message = "Simular verificacao de email, clique aqui!";
        register = UserLoginServices.RegisteredUser;
        HideRegistration = true;
        // await RegisterSqlLite();

    }
    private async Task RegisterSqlLite()
    {
        // await UserLoginSqliteServices.CreateAsync(register);
    }

    private async Task Verify()
    {
        if (NewUser)
        {
            ArgumentNullException.ThrowIfNull(register);
            await UserLoginServices.VerifyAsync(register);
            message = MessageHandler.Message;
        }
        NavigationManager.NavigateTo("login");
    }
}
